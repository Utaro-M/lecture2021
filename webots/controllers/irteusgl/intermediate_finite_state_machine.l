;;
(load "webotslib.l")

(defconstant THRESHOLD_DIST 300)
(defconstant TIME_STEP 32)
(defconstant SIMULATION 0)
(defconstant REALITY 2)
(defconstant LEFT 0)
(defconstant RIGHT 1)
(defconstant NB_DIST_SENS 8)
(defconstant PS_RIGHT_10 0)
(defconstant PS_RIGHT_45 1)
(defconstant PS_RIGHT_90 2)
(defconstant PS_RIGHT_REAR 3)
(defconstant PS_LEFT_REAR 4)
(defconstant PS_LEFT_90 5)
(defconstant PS_LEFT_45 6)
(defconstant PS_LEFT_10 7)
(setq ps (instantiate vector NB_DIST_SENS))
(setq ps_value (integer-vector 0 0 0 0 0 0 0 0))
(setq ps_offset_sim (integer-vector 35 35 35 35 35 35 35 35))
(setq ps_offset_real (integer-vector 375 158 423 682 447 594 142 360))
(setq obstacle (instantiate vector NB_DIST_SENS))

(defconstant WHEEL_RADIUS 0.02)
(defconstant AXLE_LENGTH 0.026)
(defconstant SPEED_UNIT 0.00628)

(defconstant FORWARD 0)
(defconstant STOP 1)
(defconstant UTURN 2)

(setq speed (integer-vector 0 0))
(setq state FORWARD)
(setq n 0)
(setq old_encoder 0.0)

(defun init nil
  ;;srand(time(0));
  (let ((textPS "ps0"))
    (dotimes (it NB_DIST_SENS)
      (setf (elt ps it) (wb_robot_get_device textPS))
      (incf (elt textPS 2)))
    (dotimes (i NB_DIST_SENS)
      (wb_distance_sensor_enable (elt ps i) TIME_STEP))
    (setq left_motor (wb_robot_get_device "left wheel motor"))
    (setq right_motor (wb_robot_get_device "right wheel motor"))
    (wb_motor_set_position left_motor INFINITY)
    (wb_motor_set_position right_motor INFINITY)
    (wb_motor_set_velocity left_motor 0.0)
    (wb_motor_set_velocity right_motor 0.0)

    (setq left_position_sensor (wb_robot_get_device "left wheel sensor"))
    (setq right_position_sensor (wb_robot_get_device "right wheel sensor"))
    (wb_position_sensor_enable left_position_sensor TIME_STEP)
    (wb_position_sensor_enable right_position_sensor TIME_STEP)))

(defun run nil
  (setq ps_offset (integer-vector 0 0 0 0 0 0 0 0))
  (if (equal (wb_robot_get_mode) SIMULATION)
      (dotimes (i NB_DIST_SENS)
	(setf (elt ps_offset i) (elt ps_offset_sim i)))
    (dotimes  (i NB_DIST_SENS)
      (setf (elt ps_offset i) (elt ps_offset_real i))))
  (dotimes  (i NB_DIST_SENS)
    (setf (elt ps_value i) (wb_distance_sensor_get_value (elt ps i)))
    (setf (elt obstacle i) (> (- (elt ps_value i) (elt ps_offset i)) THRESHOLD_DIST)))
  (cond
   ((= state FORWARD)
    (setf (elt speed LEFT) 300)
    (setf (elt speed RIGHT) 300)
    (when (or (elt obstacle PS_RIGHT_10) (elt obstacle PS_LEFT_10))
      (setq state STOP)
      (setq n 0)))
   ((= state STOP)
    (setf (elt speed LEFT) 0)
    (setf (elt speed RIGHT) 0)
    (incf n)
    (when (> n 40)
      (setq state UTURN)
      (setq old_encoder (abs (wb_position_sensor_get_value left_position_sensor)))))
   ((= state UTURN)
    (setf (elt speed LEFT) 150  (elt speed RIGHT) -150)
    (setq new_encoder (abs (wb_position_sensor_get_value left_position_sensor)))
    (setq d_step (- new_encoder old_encoder))
    (setq d_meter (* d_step WHEEL_RADIUS))
    (if (> (/ d_meter AXLE_LENGTH) 3.14) (setq  state FORWARD)))
   (t (setq state FORWARD)))

  (wb_motor_set_velocity left_motor (* SPEED_UNIT (elt speed LEFT)))
  (wb_motor_set_velocity right_motor (* SPEED_UNIT (elt speed RIGHT)))
  TIME_STEP)

(defun main nil
  (wb_robot_init)
  (init)
  (while t
    (wb_robot_step TIME_STEP)
    (run))
  (wb_robot_cleanup))
(main)

